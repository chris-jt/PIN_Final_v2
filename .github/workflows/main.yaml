name: Deploy EKS Cluster and Nginx

on:
    workflow_dispatch:

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: cluster-PIN 
  NODE_TYPE: t3.medium
  NODE_COUNT: 2
  AMI_ID: ami-0261755bbcb8c4a84  # AMI ID for Ubuntu 20.04 LTS in us-east-1

jobs:
  Credenciales:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Generate SSH key
      run: |
        ssh-keygen -t rsa -b 4096 -f jenkins.pem -N ""
        mv jenkins.pem.pub jenkins.pub

    - name: Upload SSH key
      uses: actions/upload-artifact@v3
      with:
        name: ssh-key
        path: |
          jenkins.pem
          jenkins.pub

    - name: Upload CloudFormation template
      uses: actions/upload-artifact@v3
      with:
        name: cloudformation-template
        path: cloudformation/ec2-stack.yaml

  Deploy_CloudFormation:
    needs: Credenciales
    runs-on: ubuntu-latest
    outputs:
      ec2_ip: ${{ steps.ec2-ip.outputs.ec2_ip }}
    steps:      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Download SSH key
      uses: actions/download-artifact@v3
      with:
        name: ssh-key

    - name: Download CloudFormation template
      uses: actions/download-artifact@v3
      with:
        name: cloudformation-template
        path: cloudformation

    - name: Deploy CloudFormation stack
      id: deploy-cfn     
      run: |
        aws cloudformation deploy \
          --template-file cloudformation/ec2-stack.yaml \
          --stack-name jenkins-ec2-stack \
          --parameter-overrides \
            KeyName=jenkins \
            PublicKeyMaterial="$(cat jenkins.pub)" \
            InstanceType="${{ env.NODE_TYPE }}" \
            AMI="${{ env.AMI_ID }}" \
          --capabilities CAPABILITY_IAM
      env:
        NODE_TYPE: ${{ env.NODE_TYPE }}
        AMI_ID: ${{ env.AMI_ID }}

    - name: Get EC2 Public IP
      id: ec2-ip
      run: |
        EC2_IP=$(aws cloudformation describe-stacks --stack-name jenkins-ec2-stack --query "Stacks[0].Outputs[?OutputKey=='EC2PublicIP'].OutputValue" --output text)
        echo "ec2_ip=$EC2_IP" >> $GITHUB_OUTPUT

    - name: Wait for EC2 instance to be ready
      run: |
        echo "Waiting for EC2 instance to be ready..."
        timeout 300 bash -c 'until nc -z ${{ steps.ec2-ip.outputs.ec2_ip }} 22; do sleep 5; done'

    - name: Setup AWS credentials on EC2
      run: |
        chmod 600 jenkins.pem
        ssh -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@${{ steps.ec2-ip.outputs.ec2_ip }} '
        mkdir -p ~/.aws
        echo "[default]
        aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        region=${{ env.AWS_REGION }}" > ~/.aws/credentials
        '

    - name: Upload SSH key and connection info
      uses: actions/upload-artifact@v3
      with:
        name: ssh-key-and-info
        path: |
          jenkins.pem
          connection_info.txt

  Conexion_EC2:
    needs: Deploy_CloudFormation
    runs-on: ubuntu-latest
    steps:  
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Download SSH key
      uses: actions/download-artifact@v3
      with:
        name: ssh-key

    - name: Set permissions for SSH key
      run: chmod 600 jenkins.pem

    - name: Connect to EC2 and setup cluster
      run: |
        ssh -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@${{ needs.Deploy_CloudFormation.outputs.ec2_ip }} 'bash -s' < ec2_user_data.sh
      env:
        CLUSTER_NAME: ${{ env.CLUSTER_NAME }}
        AWS_REGION: ${{ env.AWS_REGION }}
        NODE_TYPE: ${{ env.NODE_TYPE }}
        NODE_COUNT: ${{ env.NODE_COUNT }}

  Deploy_Nginx:
    needs: [Deploy_CloudFormation, Conexion_EC2]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Download SSH key
      uses: actions/download-artifact@v3
      with:
        name: ssh-key

    - name: Set permissions for SSH key
      run: chmod 600 jenkins.pem

    - name: Configure kubectl on EC2
      run: |
        EC2_IP=${{ needs.Deploy_CloudFormation.outputs.ec2_ip }}
        ssh -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@$EC2_IP '      
        aws eks get-token --cluster-name ${{ env.CLUSTER_NAME }} | kubectl apply -f -
        '

    - name: Deploy Nginx
      run: |
        EC2_IP=${{ needs.Deploy_CloudFormation.outputs.ec2_ip }}
        scp -i jenkins.pem -o StrictHostKeyChecking=no kubernetes/nginx-deployment.yaml kubernetes/nginx-service.yaml ubuntu@$EC2_IP:~
        ssh -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@$EC2_IP '
          kubectl apply -f nginx-deployment.yaml
          kubectl apply -f nginx-service.yaml
        '

    - name: Get Nginx Service IP
      id: nginx-ip
      run: |
        EC2_IP=${{ needs.Deploy_CloudFormation.outputs.ec2_ip }}
        NGINX_IP=$(ssh -i jenkins.pem -o StrictHostKeyChecking=no ubuntu@$EC2_IP 'kubectl get services nginx-service -o jsonpath="{.status.loadBalancer.ingress[0].hostname}"')
        echo "nginx_ip=$NGINX_IP" >> $GITHUB_OUTPUT

    - name: Save connection information
      run: |
        echo "EC2 Public IP: ${{ needs.Deploy_CloudFormation.outputs.ec2_ip }}" > connection_info.txt
        echo "Nginx Service IP: ${{ steps.nginx-ip.outputs.nginx_ip }}" >> connection_info.txt
        echo "To connect via SSH: ssh -i jenkins.pem ubuntu@${{ needs.Deploy_CloudFormation.outputs.ec2_ip }}" >> connection_info.txt

    - name: Upload connection info
      uses: actions/upload-artifact@v3
      with:
        name: connection-info
        path: connection_info.txt
 